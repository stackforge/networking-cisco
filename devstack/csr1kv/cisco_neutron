#!/bin/bash
#
# lib/neutron
# functions - functions specific to neutron

# Dependencies:
# ``functions`` file
# ``DEST`` must be defined
# ``STACK_USER`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# - net_configure_neutron
# - net_start_neutron_agents
# - net_create_neutron_initial_network
#
# ``unstack.sh`` calls the entry points in this order:
#
# - net_stop_neutron

# Neutron Networking
# ------------------

# Make sure that neutron is enabled in ``ENABLED_SERVICES``.  If you want
# to run Neutron on this host, make sure that q-svc is also in
# ``ENABLED_SERVICES``.
#
# See "Neutron Network Configuration" below for additional variables
# that must be set in localrc for connectivity across hosts with
# Neutron.
#
# With Neutron networking the NETWORK_MANAGER variable is ignored.

# Settings
# --------
# Set up default directories
count=0
Q_CISCO_CSR1KV_SETUP_SCRIPT_DIR=${Q_CISCO_CSR1KV_SETUP_SCRIPT_DIR:-$DIR_CISCO/devstack/csr1kv}
# Default Neutron Plugin
Q_PLUGIN=${Q_PLUGIN:-cisco}
# Default path for extra conf files.
Q_PLUGIN_EXTRA_CONF_PATH=${Q_PLUGIN_EXTRA_CONF_PATH:-etc/neutron}

source $DIR_CISCO/devstack/csr1kv/cisco
source $DIR_CISCO/devstack/csr1kv/cisco_router
source $DIR_CISCO/devstack/csr1kv/ciscocfgagent

# Cisco Routing Service Plugin functions
# ---------------------------------
# Use security group or not
# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace
# Functions
# ---------
function configure_cisco_csr_router {
    net_configure_neutron
    net_start_neutron_agents
}

function start_cisco_csr_router {
    if [[ "$count" == 0 ]];then
        setup_for_csr1kv
        net_create_neutron_initial_network
        count=$((count+1))
    fi
}


# net_configure_neutron()
# Set common config for Cisco router after neutron server and agents.
function net_configure_neutron {
    if is_service_enabled q-agt q-svc; then
        net_neutron_plugin_configure_service
    fi
}

function setup_for_csr1kv {
    if [[ "$Q_PLUGIN" == "csr1kv_openvswitch" ]]; then
	    plugin=ovs
    elif [[ "$Q_PLUGIN" == "cisco" || "${Q_CISCO_PLUGIN_SUBPLUGINS[0]}" == "n1kv" ]]; then
	    plugin=n1kv
    else
	    die $LINENO "Not a deployment with CSR1kv. Exiting!"
    fi
    echo "Running CSR1Kv setup with ${MYSQL_USER} ${MYSQL_PASSWORD}"
    if [[ -f $TOP_DIR/localrc ]]; then
        localrc_name=$TOP_DIR/localrc
    else
        localrc_name=$TOP_DIR/local.conf
    fi
    (cd $Q_CISCO_CSR1KV_SETUP_SCRIPT_DIR; ./csr1kv_install_all.sh neutron $plugin $localrc_name $MYSQL_USER $MYSQL_PASSWORD $Q_CISCO_MGMT_CFG_AGENT_IP)
}

function net_create_neutron_initial_network {
    # Create a router, and add the private subnet as one of its interfaces
    # Create a tenant-owned router.
    ROUTER_ID=$(neutron router-create --tenant-id $TENANT_ID $Q_ROUTER_NAME | grep ' id ' | get_field 2)
    die_if_not_set $LINENO ROUTER_ID "Failure creating ROUTER_ID for $TENANT_ID $Q_ROUTER_NAME"

    # Create an external network, and a subnet. Configure the external network as router gw
    if [ "$Q_USE_PROVIDERNET_FOR_PUBLIC" = "True" ]; then
        EXT_NET_ID=$(neutron net-create "$PUBLIC_NETWORK_NAME" -- --router:external=True --provider:network_type=flat --provider:physical_network=${PUBLIC_PHYSICAL_NETWORK} | grep ' id ' | get_field 2)
    else
        EXT_NET_ID=$(neutron net-create "$PUBLIC_NETWORK_NAME" -- --router:external=True | grep ' id ' | get_field 2)
    fi
    die_if_not_set $LINENO EXT_NET_ID "Failure creating EXT_NET_ID for $PUBLIC_NETWORK_NAME"
    if [[ "$IP_VERSION" =~ 4.* ]]; then
        # Configure router for IPv4 public access
        _neutron_configure_router_v4
    fi

    if [[ "$IP_VERSION" =~ .*6 ]]; then
        # Configure router for IPv6 public access
        _neutron_configure_router_v6
    fi

    if is_service_enabled tempest; then
        iniset $TEMPEST_CONFIG network public_network_id "$EXT_NET_ID"
    fi
}

# Start running processes, including screen
function net_start_neutron_agents {
    if is_service_enabled ciscocfgagent; then
        start_the_ciscocfgagent
    fi
}

# net_stop_neutron() - Stop running processes (non-screen)
function net_stop_neutron {
    if is_service_enabled q-ciscorouter; then
         neutron_cisco_router_stop
    fi
}

# Restore xtrace
$XTRACE
