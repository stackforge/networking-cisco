[tox]
envlist = py3,py27,{py3,py27}-{newton,ocata,pike,master},pep8
minversion = 2.0
skipsdist = True

[testenv]
# Note the hash seed is set to 0 until neutron can be tested with a
# random hash seed successfully.
setenv = VIRTUAL_ENV={envdir}
         PYTHONHASHSEED=0
         PYTHONWARNINGS=default::DeprecationWarning
         NEUTRON_BRANCH=mitaka-eol
         newton: NEUTRON_BRANCH=newton-eol
         newton: REQUIREMENTS_BRANCH=stable/newton
         ocata: NEUTRON_BRANCH=stable/ocata
         pike: NEUTRON_BRANCH=stable/pike
         master: NEUTRON_BRANCH=master
passenv = TRACE_FAILONLY http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY NEUTRON_BRANCH NEUTRONCLIENT_BRANCH REQUIREMENTS_BRANCH OS_DEBUG
usedevelop = True
install_command = {toxinidir}/tools/tox_install.sh {env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt} {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals = sh
# There is secret magic in ostestr which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.
commands = ostestr {posargs}

[testenv:hashtest]
# This is the same as default environment, but with a random PYTHONHASHSEED.
# You can also specify a specific hashseed (for test repeatability) as follows:
#   tox --hashseed 1235130571 -e hashtest
setenv = VIRTUAL_ENV={envdir}

[testenv:pep8]
setenv = VIRTUAL_ENV={envdir}
         PYTHONHASHSEED=0
         NEUTRON_BRANCH=master
commands =
  # If it is easier to add a check via a shell script, consider adding it in this file
  sh ./tools/misc-sanity-checks.sh
  flake8 {posargs}
  neutron-db-manage --subproject networking-cisco check_migration
whitelist_externals = sh

[testenv:genconfig]
commands = {toxinidir}/tools/generate_config_file_samples.sh

[testenv:releasenotes]
commands = sphinx-build -a -W -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:i18n]
commands = python ./tools/check_i18n.py ./networking_cisco ./tools/i18n_cfg.py

[testenv:compare-cover]
# Will do coverage on baseline (HEAD^) and recent commit (HEAD) and compare
# results. Used in CI to test commit. Can be used locally, and will include
# any uncommitted changes.
commands = {toxinidir}/networking_cisco/tests/ci/cover.bash {posargs}

[testenv:cover]
# For running coverage in local environment.
commands =
  python setup.py test --coverage --coverage-package-name=networking_cisco --testr-args='{posargs}'

[testenv:venv]
setenv = NEUTRON_BRANCH=stable/pike
         REQUIREMENTS_BRANCH=stable/pike
commands = {posargs}

[testenv:docs]
# NOTE(sambetts) Pin this to the highest supported stable release
setenv =
install_command = pip install {opts} {packages}
deps = -r{toxinidir}/doc-requirements.txt
commands = python setup.py build_sphinx

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with '# '
# H305 imports not grouped correctly
# H404 multi line docstring should start with a summary
# H405 multi line docstring summary not separated with an empty line
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed
ignore = E125,E126,E128,E129,E265,H305,H404,H405,N530
# H106: Donâ€™t put vim configuration in source files
enable-extensions=H106
show-source = true
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,src,tools,.tmp

[testenv:pylint]
deps =
  {[testenv]deps}
  pylint
commands =
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:neutron}

[hacking]
import_exceptions = networking_cisco._i18n
local-check-factory = neutron_lib.hacking.checks.factory
