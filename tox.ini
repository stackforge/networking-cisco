[tox]
envlist = py3,py27,{py3,py27}-{newton,ocata,pike,queens,rocky,master},pep8
minversion = 2.0
skipsdist = True

[testenv]
# Note the hash seed is set to 0 until neutron can be tested with a
# random hash seed successfully.
setenv = VIRTUAL_ENV={envdir}
         PYTHONHASHSEED=0
         PYTHONWARNINGS=default::DeprecationWarning
passenv = TRACE_FAILONLY http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY OS_DEBUG
usedevelop = True
install_command =
    pip install {opts} {packages}
deps =
    newton: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/newton}
    ocata: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/ocata}
    pike: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/pike}
    queens: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/queens}
    rocky: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=master}

    newton: http://tarballs.openstack.org/neutron/neutron-9.4.1-py2.py3-none-any.whl
    ocata: http://tarballs.openstack.org/neutron/neutron-10.0.5-py2.py3-none-any.whl
    pike: neutron>=11.0.0,<12.0.0
    queens: neutron>=12.0.0,<13.0.0
    rocky: neutron==13.0.0.0b3

    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt
whitelist_externals =
    sh
    bash
# There is secret magic in stestr which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.
commands = stestr run {posargs}


[testenv:py27]
deps =
    -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=mitaka-eol}
    http://tarballs.openstack.org/neutron/neutron-8.4.0-py2.py3-none-any.whl
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements-mitaka.txt
[testenv:py3]
deps = {[testenv:py27]deps}
[testenv:py34]
deps = {[testenv:py27]deps}
[testenv:py35]
deps = {[testenv:py27]deps}
[testenv:py36]
deps = {[testenv:py27]deps}


[testenv:hashtest]
basepython = python3
# This is the same as default environment, but with a random PYTHONHASHSEED.
# You can also specify a specific hashseed (for test repeatability) as follows:
#   tox --hashseed 1235130571 -e hashtest
setenv = VIRTUAL_ENV={envdir}

[testenv:higheststable]
basepython = python3
deps =
    -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/queens}
    neutron>=12.0.0,<13.0.0
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/test-requirements.txt

[testenv:pep8]
basepython = python3
deps = {[testenv:higheststable]deps}
commands =
  # If it is easier to add a check via a shell script, consider adding it in this file
  sh ./tools/misc-sanity-checks.sh
  flake8 {posargs}
  neutron-db-manage --subproject networking-cisco check_migration
whitelist_externals = sh

[testenv:genconfig]
basepython = python3
deps = {[testenv:py27]deps}
commands = {toxinidir}/tools/generate_config_file_samples.sh

[testenv:releasenotes]
basepython = python3
deps = {[testenv:py27]deps}
commands = sphinx-build -a -W -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:i18n]
basepython = python3
deps = {[testenv:py27]deps}
commands = python ./tools/check_i18n.py ./networking_cisco ./tools/i18n_cfg.py

[testenv:bandit]
basepython = python3
deps = -r{toxinidir}/test-requirements.txt
# Currently only verifying ML2 drivers is successful
commands = bandit -r networking_cisco/ml2_drivers -n5 -f txt
# Use the following instead when ASR1K issues resolved
#commands = bandit -r networking_cisco -x apps/saf,tests,plugins/cisco/cpnr -n5 -f txt


[testenv:compare-cover]
# Compare coverage to a minimum coverage level percentage
basepython = python3
envdir = {toxworkdir}/cover
deps = {[testenv:py27]deps}
setenv = {[testenv:cover]setenv}
commands =
  {[testenv:cover]commands}
  coverage report --fail-under 62

[testenv:cover]
# For running coverage in local environment.
basepython = python3
setenv = {[testenv]setenv}
         PYTHON=coverage run --source networking_cisco --omit='*tests*' --parallel-mode
deps = {[testenv:py27]deps}
commands =
  stestr run {posargs}
  coverage combine
  coverage html -d cover
  coverage xml -o cover/coverage.xml

[testenv:venv]
basepython = python3
deps = {[testenv:higheststable]deps}
commands = {posargs}

[testenv:docs]
basepython = python3
# NOTE(sambetts) Pin this to the highest supported stable release
install_command = pip install {opts} {packages}
deps = -r{toxinidir}/doc/requirements.txt
commands =
    sphinx-build -W -b html doc/source doc/build/html

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with '# '
# H305 imports not grouped correctly
# H404 multi line docstring should start with a summary
# H405 multi line docstring summary not separated with an empty line
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed
ignore = E125,E126,E128,E129,E265,H305,H404,H405,N530
# H106: Donâ€™t put vim configuration in source files
enable-extensions=H106
show-source = true
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,src,tools,.tmp

[testenv:pylint]
basepython = python3
deps =
  {[testenv:py27]deps}
  pylint
commands =
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:neutron}

[hacking]
import_exceptions = networking_cisco._i18n
local-check-factory = neutron_lib.hacking.checks.factory
